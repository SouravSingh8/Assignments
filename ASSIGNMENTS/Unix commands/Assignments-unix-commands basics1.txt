Objective:- Assignments will help trainees to understand the basics of unix command and how to explore and use it.


***DO NOT copy paste commands from internet, though you can take help of teh internet for the assignments below.
****Be Honest to yourself!


important command and option to learn unix commands:-
1. man <-- Command
	Example:-
		man ls

2. --help <-- Option
	Example:-
		ls --help

NOTE:- Always use "man" command before using any unix commands and read about it and its options and how to use it.

 
Assignments:-

1. List the contents of a directory and their attributes
	Ans :
		du

2. Long list the content with file, directory ownership, permissions,sizes, etc...
	Ans :
		ls -l /home/sourav/dev

3. Display the size of the file in human readable format
	Ans :
		ls -lh filepath

4. Show all files and folders including hidden one
	Ans : 
		ls -la directorypath

5. list directories recursively
	Ans :
		ls -R directorypath

6. Sort the files by size with largest at the top
	Ans :
		ls -lhS directorypath

7. Sort the files by last time modified displaying the newest first.
	Ans :
		ls -lt directorypath

8. Diplay the location of a program/command, where it is installed.
	Ans :
		which commandName
		whereis commandName

9. Which command is used to switch directory from one to another
	Ans :
		cd

10. List all the environment variables set for the current shell environment
	Ans :
		env

11. Did you notice something in the output of "env" command?
	Ans :
		Along with the environment variables it gives the shell which is being used, pwd, Home_path, hostname, user,LANG,etc.

12. Which command is used to print the text or any variables value in the Console/Terminal?
	Ans :
		echo

13. Print the value of the env variable "PATH" on the console
	Ans :
		echo $PATH

14. Is linux a case-sensitive operating system?
	Ans :
		Yes

15. Is, "Ls" same as "ls"?
	Ans :
		No

16. Display your currently logged in user
	Ans :
		users
		w
		who
		whoami

17. how do you change the currrently logged in user to another user?
	Ans :
		su -l username
		Then Enter the password

18. Which command is used to leave a shell environment that you are currently logged in to?
	Ans :
		exit

19. How do you reboot the system?
	Ans :
		First we have to login to the root user
		command : sudo su
		Then type this command and press enter
		command : sudo reboot

20. How do you shutdown the system?
	Ans :		
		First we have to login to the root user
		command : sudo su
		Then type this command and press enter
		command : shutdown now
			  shutdown +15 Shutting down in 15 minutes 

21. Display all the major running processes in the system
	Ans :
		ps -aux

22. Understand the output of command used in above question of displaying processes, explain the meaning of each column and what data it displays?
	Ans :
		This command prints all the running process in system regardless from where they have been executed.
		
		Column names:
				USER 	: under which user the process is running

				PID 	: process id of the process
				
				%CPU 	: CPU time used by the process

				%MEM 	: Physical memory used by the process

				VSZ 	: Virtual memory used by the process

				RSS 	: Resident Set Size, the non-swappable physical memory used by this process (in KiB)

				TTY 	: Terminal from which this process is started. Question mark (?) sign represents that this process is not started from a terminal

				STAT 	: Shows process state
			
				START 	: Starting time and date of the process
				
				TIME 	: Total CPU time used by this process

				COMMAND : he command with all its arguments which started this process


23. Display the name of the system kernel
	Ans :
		uname
		uname -s

24. display the kernel release number
	Ans :
		uname -r

25. display the machine type of the current kernel
	Ans :
		uname -m
		arch

26. Display the name of the operating system that the kernel is running on
	Ans :
		uname -o

27. Display all info that uname command can show.
	Ans :
		uname -a

28. Display the name of directory that you are currently pointing to
	Ans :
		pwd

29. change the current directory to another directory that you have in your system.
	Ans :
		cd targetdirectorypath

30. Go up one directory
	Ans :
		cd ..

31. Return to last directory
	Ans :
		cd -

32. change the current directory to home(logged in user's) directory
	Ans :
		cd
		cd ~

33. How to check all the command used from the prompt (Command History)
	Ans :
		history

34. In which file the history of commands are stored in?
	Ans :
		~/.bash_history

35. How many lines of history does the system keep and from where you can change it?
	Ans :
		1000 lines
		change the value of the variables HISTSIZE and HISTFILESIZE

36. How can you modify bash's history behaviour
	Ans :
		By editing ~/.bashrc file

37. Display all the commands entered so far, now, try to run a particular command from the history list without typing that command.
NOTE:- TAB key is your friend when it comes to command completion and having long file and directory names autocompleted at the bash prompt for you. JUST BE LAZY AND USE TAB KEY FOR AUTO COMPLETION ;-)
	Ans :
		history
		Press up or down arrow key and then press Enter

38. What are the different types of shell and where are they used and how do we use them?
	Ans :
		A shell is a program that acts as an interface between a user and the kernel
		
		Different types of shell are :
			1. Bourne shell(sh) - Regarded as the first UNIX shell ever.It gained popularity due to its compact nature and high speeds of operation.
					      The complete path-name for the Bourne shell is /bin/sh and /sbin/sh. By default, it uses the prompt # for the root
					      user and $ for the non-root users.
							Drawbacks - It doesn’t have in-built functionality to handle logical and arithmetic operations.
								    Also, unlike most different types of shells in Linux, the Bourne shell cannot recall previously used commands.

								    
			2. Bourne-Again Shell(bash) - It allows us to automatically recall previously used commands and edit them with help of arrow keys, unlike the Bourne shell.
						      The complete path-name for the GNU Bourne-Again shell is /bin/bash. By default, it uses the prompt bash-VersionNumber# for the root 						      user and bash-VersionNumber$ for the non-root users.


			3. C Shell(csh) - The C shell was created at the University of California by Bill Joy. It is denoted as csh. It was developed to include useful programming features 					  	  like in-built support for arithmetic operations and a syntax similar to the C programming language. Further, it incorporated command history which 					  was missing in different types of shells in Linux like the Bourne shell. Another prominent feature of a C shell is “aliases”.
					  Complete path-name for the C shell is /bin/csh. By default, it uses the prompt hostname# for the root user and hostname% for the non-rootusers.


			4. Korn Shell(ksh) - The Korn shell was developed at AT&T Bell Labs by David Korn, to improve the Bourne shell. It allows in-built support for arithmetic operations 					     while offering interactive features which are similar to the C shell. The Korn Shell can run scripts made for Bourne Shell and C Shell. Offers 					     string, array and function manipulation similar to the C programming language. Faster than most different types of shells in Linux, including 					     the C shell.
					     The complete path-name for the Korn shell is /bin/ksh. By default, it uses the prompt # for the root user and $ for the non-root users.


			5. Z Shell (zsh) - The Z Shell or zsh is a sh shell extension with tons of improvements for customization. If you want a modern shell that has all the features a 					   much more, the zsh shell is what you’re looking for.
							Features - Generate filenames based on given conditions
								   Plugins and theming support
								   Index of built-in functions
								   Command completion

39. What is the difference between login shell and non-login shell?
	Ans :
		Login Shell - A Login shell is created after a successful login of user.For example, when you login at a Linux system via terminal, SSH or switch to user with “su -”command.
			      When a login shell start, it runs a set of predefined script to configure shell environment. To identify the login shell, run the below command on terminal.
					echo $0
			      If you get the result like “-bash” or “-su” means, you are on login shell. Make sure it has hyphen (-) as prefix.

					A Login Shell executes following scripts:
										Login shell executes /etc/profile
										/etc/profile executes all scripts in /etc/profile.d/
										Then executes users ~/.bash_profile
										~/.bash_profile executes users ~/.bashrc
										~/.bashrc executes /etc/bashrc

		Non Login Shell - Non Login Shell is the shell, which is started by the login shell. For example, A shell which you started from another shell or started by a program etc.
				  Non logins shell output will be bash or su(if we type echo $0)
				 	A non login shell executes the following script to set the shell environment:
										Non login shell first executes ~/.bashrc
										Then ~/.bashrc executes /etc/bashrc
										/etc/bashrc calls the scripts in /etc/profile.d

40. How do we start login shell and non-login shell?
	Ans : Login shells are started when we login at Linux system via terminal. So we can switch user using the su command and a login shell will be started.
	      We can start a non-login shell from another shell or by a program
	      
41. What happens when you start a login shell (which files are read and used and Why)?
	Ans :
		When Bash is invoked as an interactive login shell, or as a non-interactive shell with the --login option, it first reads and executes commands from the file /etc/profile, 			if that file exists. After reading that file, it looks for ~/.bash_profile, ~/.bash_login, and ~/.profile, in that order, and reads and executes commands from the first one 			that exists and is readable. The --noprofile option may be used when the shell is started to inhibit this behavior.

		When an interactive login shell exits, or a non-interactive login shell executes the exit builtin command, Bash reads and executes commands from the file ~/.bash_logout, if 			it exists.

42. What happens when you start a non-login shell (Which files are read and used and Why)?
	Ans :
		When an interactive shell that is not a login shell is started, Bash reads and executes commands from ~/.bashrc, if that file exists. This may be inhibited by using the --		norc option. The --rcfile file option will force Bash to read and execute commands from file instead of ~/.bashrc.

		So, typically, your ~/.bash_profile contains the line
				if [ -f ~/.bashrc ]; then . ~/.bashrc; fi
		after (or before) any login-specific initializations.

43. What are Shell Configuration Files, why do we need it?
	Ans :
		Shell configuration files are executed automatically when you log in and out of a shell. They initialize and configure a shell upon login and perform cleanup operations upon 		logout.

44. Explain the Order of file usage from the system/user's home directory when user logs in to the System.
	Ans :

45. What are Shell Variables, list major shell variables and what do they represent?
	Ans :
		Shell Variables − A shell variable is a special variable that is set by the shell and is required by the shell in order to function correctly. Some of these variables are 				  environment variables whereas others are local variables.

46. How we see all our env variables?
	Ans :
		env

47. How we see all env variables in alphabical order?
	Ans :
		env | sort 

48. What Format does the env var and its values are stored?
	Ans :
		User level Environment variables are mostly stored in .bashrc and .profile files in your Home folder.It consist solely of uppercase letters, digits , "_"(underscore) of the characters. It will not be start with digit.

49. How do you create your own varible?
	Ans :
		Type the variable name(usually in capital letters), then an equal sign and lastly the variable value

50. How do you start a new bash shell?
	Ans :
		Open terminal and then type bash and then press enter to start a new bash shell

51. Difference between Local/Shell variables to Global Variable
	Ans :
		Shell Variables - Shell variables are variables whose scope is in the current shell session, for example in an interactive shell session or a script.The use of shell 				  variables is to keep track of data in the current session. Shell variables usually have names with lower-case letters.

		Gobal Variable/Environment Variable - An environment variable is a shell variable which has been exported. This means that it will be visible as a variable, not only in the 						      shell session that created it, but also for any process (not just shells) that are started from that session.

52. Making a variable accessible from other the shell in the system.
	Ans :
		export variablename

53. Show the real life use case of exporting a variable
	Ans :
		Export a variable(making the variable environment variable). Then open a new shell/process from the current shell and reference the variable. 
		exporting is used for import variable value for another script. For language like bash it is very useful as it cuts down to write so many variable in 

54. Convert the above script file into a command, The file should run with "myappp" instead of "myapp.sh"
	Ans :
		add Shebang directive(#!/bin/bash) inside the top the file. Make sure the file name is "myapp" and not "myapp.sh". Then grant the executable permission.
		Then move the file to /usr/bin/. Your script has now turned into a command

55. What is Globbing? Explain in depth with examples?
	Ans :
		The Bash shell feature that is used for matching or expanding specific types of patterns is called globbing. Globbing is mainly used to match filenames or searching for 			content in a file. Globbing uses wildcard characters to create the pattern.
		
		Examples : 
				ls -l ????.txt
				ls -l *.pl
				ls -l [p-s]*
				grep '^[P-R]' list.txt
				grep 50$ list.txt

56. List all entries with extension ".sh"
	Ans :
		ls -l /bin/*.sh

57. List all entries with numbers in it.
	Ans :
		ls  *[0-9]*

58. List all entries that starts with a character and ends with a number
	Ans :
		ls | grep -i ^[a-z]*[0-9].txt$

59. List all entries that name length more than 5 characters
	Ans :
		find . \( -name "??????*.txt" \)

60. What is Quoting? and Why do we need it?
	Ans :
		Quoting is used to remove the special meaning of certain characters or words to the shell. Quoting can be used to disable special treatment for special characters, to 		prevent reserved words from being recognized as such, and to prevent parameter expansion.
		Quoting is used in Linux to protect or limit the substitution of special character and for grouping of words.
	
61. Write few(minimum 3) unique examples that shows, how a particular problem is solved using Quoting.
	Ans :
		echo '$PATH'

		abc=9
		echo "\$abc"
	
		echo 'Today'\''s Weather'
				Today's Weather
			 
62. How do you find a particular files/directories based on a particular search criteria?
	HINT:- look for commands -> locate, find and whereis
	Ans :
		We use the commands find,locate,whereis along with specific patterns and types to search for files and directories	

63. Write major difference between locate, find and whereis?
	Ans :
		find is what you use when you want to search by particular criteria and also manipulate files. It has many more options than locate so allows far more fine-grained control 			of results. It is slow because it performs the requested test(s) on every file to see if it matches.

	 	locate is used to scan the whole system quickly for something - you might use this when you have no idea where something is, or when you want to find all related files 			scattered across various unknown places.
	
		whereis command simply returns the location of the executables, the man pages and the sources of a program.

64. How Globbing is different from locate, find and whereis?
	Ans :
		Globbing is used to specify patterns.It is not a command.
		locate, find and whereis are commands to find files and directories. In this commands we specify patterns to search for a file.

65. Explain the Linux File System.
	Ans :
		Linux file system is generally a built-in layer of a Linux operating system used to handle the data management of the storage. It helps to arrange the file on the disk 			storage. It manages the file name, file size, creation date, and much more information about a file.
		A Linux file system is a structured collection of files on a disk drive or a partition. A partition is a segment of memory and contains some specific data. In our machine, 			there can be various partitions of the memory. Generally, every partition contains a file system.
	
		The Linux file system contains the following sections:
					The root directory (/)
					A specific data storage format (EXT3, EXT4, BTRFS, XFS and so on)
					A partition or logical volume having a particular file system

66. Explain absolute and Relative Paths
	Ans :
		Absolute Path - Path of a file or directory from the root directory
		Relative Path - Path related to the current working directory. Path of a file or director relative to the current working directory.

67. What are the different ways of creating a File in linux System? Write an example of each and the difference between them.
	Ans :
		touch filename - This creates an empty file if the file does not exist. If the file exists it changes the timestamp.
		cat filename - This creates an empty file if the file does not exist . If the file exists it shows the content of the file.
		editor(vi,nano) filename - This creates a file and opens the specified editor to modify the file.

68. In how many ways we can delete the files from linux system? write an example of each and the difference between them.
	Ans :
		Commands :
				rm filename = Deletes the file
				rm -i filename = Asks before deleting the file		
				srm -vz filename = Deletes file securely. v option is to enable verbose mode and z-wipes the last write with zeros instead of random data 
				wipe -rfi filename = A Linux wipe command securely erases files from magnetic memory and thereby making it impossible to recover deleted files or directory 						     content.
							Options :
									-r – tells wipe to recurse into subdirectories
									-f – enables forced deletion and disable confirmation query
									-i – shows progress of deletion process

69. Archiving files using linux command, write a command to archive set of files from linux commands.
	Ans :
		tar cvf archivename.tar file1.txt file2.txt file3.txt
		
			Options :
					c = to create a tar file
					f = file with this name
					v = verbose

70. Extract the archived files from the above step.
	Ans :
		tar xvf archivename.tar




